## ######################################################################
##            ___   ___    _  _  ___ _____   ___ ___ ___ _____
##           |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _|
##           | |) | (_) | | .` | (_) || |   | _|| |) | |  | |
##           |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|
##            _____ _  _ ___ ___   ___ ___ _    ___ _
##           |_   _| || |_ _/ __| | __|_ _| |  | __| |
##             | | | __ || |\__ \ | _| | || |__| _||_|
##             |_| |_||_|___|___/ |_| |___|____|___(_)
##
## This is a generated file. Please edit the corresponding template
## file (example: templates/gpdb-tpl.yml) and regenerate the pipeline
## using appropriate tool (example: gen_pipeline.py -t prod).
## ----------------------------------------------------------------------
## Generated by gen_pipeline.py at: 2020-05-13 14:37:24.003587
## Template file: gpdb-tpl.yml
## OS Types: ['centos6', 'centos7', 'ubuntu18.04', 'win']
## Test Sections: ['ICW', 'Replication', 'ResourceGroups', 'Interconnect', 'CLI', 'UD', 'Extensions']
## ======================================================================

## ======================================================================
##                   _
##   __ _ _ __   ___| |__   ___  _ __ ___
##  / _` | '_ \ / __| '_ \ / _ \| '__/ __|
## | (_| | | | | (__| | | | (_) | |  \__ \
##  \__,_|_| |_|\___|_| |_|\___/|_|  |___/
## ======================================================================
## NOTE: only one anchors section is allowed per file, so we define this
##  at the top of the file so anchors are usable as early as possible.
anchors:
- &default_platform
  PLATFORM: centos7

- &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/google/

- &ccp_default_vars
  instance_type: n1-standard-1
  <<: *default_platform

- &destroy_common
  action: destroy
  terraform_source: ccp_src/google/
  vars:
    aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
    aws_ebs_volume_type: standard

- &ccp_destroy
  put: terraform
  params:
    <<: *destroy_common
    env_name_file: terraform/name
  get_params:
    action: destroy

- &ccp_destroy_two_clusters
  in_parallel:
    - put: terraform_1
      params:
        <<: *destroy_common
        env_name_file: terraform_1/name
      get_params:
        action: destroy
    - put: terraform_2
      params:
        <<: *destroy_common
        env_name_file: terraform_2/name
      get_params:
        action: destroy

- &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: google
  <<: *default_platform

- &set_failed
  do:
    - task: on_failure_set_failed
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotaldata/ccp
            tag: "7"
        inputs:
          - name: ccp_src
          - name: terraform
        run:
          path: 'ccp_src/google/ccp_failed_test.sh'
        params:
          GOOGLE_CREDENTIALS: {{google-service-account-key}}
          GOOGLE_PROJECT_ID: {{google-project-id}}
          GOOGLE_ZONE: {{google-zone}}
          GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
          AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
          AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
          AWS_DEFAULT_REGION: {{tf-machine-region}}
          BUCKET_PATH: clusters-google/
          BUCKET_NAME: {{tf-bucket-name}}

- &set_failed_two_clusters_common
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: pivotaldata/ccp
      tag: "7"
  run:
    path: 'ccp_src/google/ccp_failed_test.sh'
  params:
    GOOGLE_CREDENTIALS: {{google-service-account-key}}
    GOOGLE_PROJECT_ID: {{google-project-id}}
    GOOGLE_ZONE: {{google-zone}}
    GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
    AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
    AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
    AWS_DEFAULT_REGION: {{tf-machine-region}}
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: {{tf-bucket-name}}

- &terraform_cluster
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- &set_failed_two_clusters
  in_parallel:
    - task: on_failure_set_failed-1
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_1
    - task: on_failure_set_failed-2
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_2

## ======================================================================
##   __ _ _ __ ___  _   _ _ __  ___
##  / _` | '__/ _ \| | | | '_ \/ __|
## | (_| | | | (_) | |_| | |_) \__ \
##  \__, |_|  \___/ \__,_| .__/|___/
##  |___/                |_|
## ======================================================================

groups:
- name: all
  jobs:
  - concourse_unit_tests
  - compile_gpdb_centos7
  - compile_gpdb_ubuntu18.04
  - compile_gpdb_clients_windows
  - test_gpdb_clients_windows
  ## --------------------------------------------------------------------
  - icw_gporca_centos7
  - icw_planner_centos7
  - icw_gporca_ictcp_centos7
  - gpexpand
  - pg_upgrade
  - icw_gporca_ubuntu18.04
  - icw_planner_ubuntu18.04
  - gate_icw_end
  ## --------------------------------------------------------------------
  - interconnect
  ## --------------------------------------------------------------------
  - gate_resource_groups_start
  - resource_group_centos7
  ## --------------------------------------------------------------------
  - gate_cli_start
  - cli_cross_subnet
  - gpmovemirrors
  - gpmovemirrors_ubuntu18
  - gppkg
  - gppkg_ubuntu18
  - analyzedb
  - analyzedb_ubuntu18
  - gpinitsystem
  - gpinitsystem_ubuntu18
  - gpstate
  - gpstate_ubuntu18
  - replication_slots
  - replication_slots_ubuntu18
  - gpactivatestandby
  - gpactivatestandby_ubuntu18
  - gpinitstandby
  - gpinitstandby_ubuntu18
  - gpcheckcat
  - gpcheckcat_ubuntu18
  - gprecoverseg
  - gprecoverseg_ubuntu18
  - gpaddmirrors
  - gpaddmirrors_ubuntu18
  - gpconfig
  - gpconfig_ubuntu18
  - gpssh-exkeys
  - gpssh-exkeys_ubuntu18
  - gpstart
  - gpstart_ubuntu18
  - gpstop
  - gpstop_ubuntu18
  - check_centos
  - combine_cli_coverage
 ## ---------------------------------------------------------------------
  - icw_extensions_gpcloud_centos7


## ======================================================================

- name: Release
  jobs:
  - gate_release_candidate_start
  - Release_Candidate
  - Publish Server Builds

## ======================================================================

- name: Compile
  jobs:
  - compile_gpdb_centos7
  - compile_gpdb_ubuntu18.04
  - compile_gpdb_clients_windows
  - test_gpdb_clients_windows

## ======================================================================

- name: ICW
  jobs:
  - icw_gporca_centos7
  - icw_planner_centos7
  - icw_gporca_ictcp_centos7
  - compile_gpdb_centos7
  - pg_upgrade
  - icw_gporca_ubuntu18.04
  - icw_planner_ubuntu18.04
  - compile_gpdb_ubuntu18.04
  - gate_icw_end


## ======================================================================

- name: Extensions
  jobs:
  - icw_extensions_gpcloud_centos7

## ======================================================================

- name: Interconnect
  jobs:
  - compile_gpdb_centos7
  - interconnect

## ======================================================================

- name: ResourceGroups
  jobs:
  - gate_resource_groups_start
  - resource_group_centos7
  - compile_gpdb_centos7

## ======================================================================

- name: CLI
  jobs:
  - gate_cli_start
  - compile_gpdb_ubuntu18.04
  - cli_cross_subnet
  - gpmovemirrors
  - gpmovemirrors_ubuntu18
  - gppkg
  - gppkg_ubuntu18
  - analyzedb
  - analyzedb_ubuntu18
  - gpinitsystem
  - gpinitsystem_ubuntu18
  - gpstate
  - gpstate_ubuntu18
  - replication_slots
  - replication_slots_ubuntu18
  - gpactivatestandby
  - gpactivatestandby_ubuntu18
  - gpinitstandby
  - gpinitstandby_ubuntu18
  - gpcheckcat
  - gpcheckcat_ubuntu18
  - gprecoverseg
  - gprecoverseg_ubuntu18
  - gpaddmirrors
  - gpaddmirrors_ubuntu18
  - gpconfig
  - gpconfig_ubuntu18
  - gpssh-exkeys
  - gpssh-exkeys_ubuntu18
  - gpstart
  - gpstart_ubuntu18
  - gpstop
  - gpstop_ubuntu18
  - check_centos
  - combine_cli_coverage
  - compile_gpdb_centos7
  - gpexpand
  - pg_upgrade



## ======================================================================
##                                           _
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  | |_ _   _ _ __   ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \ | __| | | | '_ \ / _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |_| | |_) |  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___|  \__|\__, | .__/ \___||___/
##                                               |___/|_|
## ======================================================================

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource
## ======================================================================
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___||___/
## ======================================================================

resources:
- name: ccp_src
  type: git
  source:
    branch: {{ccp-git-branch}}
    private_key: {{ccp-git-key}}
    uri: {{ccp-git-remote}}

- name: terraform
  <<: *terraform_cluster

- name: terraform_1
  <<: *terraform_cluster

- name: terraform_2
  <<: *terraform_cluster

- name: alpine-docker
  type: docker-image
  source:
    repository: alpine
    tag: latest

- name: ccp-image
  type: docker-image
  source:
    repository: pivotaldata/ccp
    tag: '7'

- name: icw_planner_centos7_dump
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/icw_planner_centos7_dump/dump.sql.xz

- name: gpdb_src
  type: git
  source:
    branch: {{gpdb-git-branch}}
    uri: {{gpdb-git-remote}}
    ignore_paths:
    - gpdb-doc/*
    - README*

- name: bats_core_src
  type: git
  source:
    branch: master
    uri: https://github.com/bats-core/bats-core.git
    tag_filter: v1.1.0

- name: libquicklz-centos7
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos7/libquicklz-(1\.5\.0-.*)-1.el7.x86_64.rpm

- name: libquicklz-devel-centos7
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos7/libquicklz-devel-(1\.5\.0-.*)-1.el7.x86_64.rpm

- name: libquicklz-ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/ubuntu18.04/libquicklz-dev_(1\.5\.0-.*)-1_amd64.deb
- name: gpdb7-centos7-build
  type: docker-image
  source:
    repository: pivotaldata/gpdb7-centos7-build
    tag: latest

- name: gpdb7-centos7-test
  type: docker-image
  source:
    repository: pivotaldata/gpdb7-centos7-test
    tag: latest


- name: gpdb7-ubuntu18.04-build
  type: docker-image
  source:
    repository: pivotaldata/gpdb7-ubuntu18.04-build
    tag: latest

- name: gpdb7-ubuntu18.04-test
  type: docker-image
  source:
    repository: pivotaldata/gpdb7-ubuntu18.04-test
    tag: latest


- name: bin_gpdb_centos7_icw_green
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: bin_gpdb_centos7/gpdb_branch_master/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_centos7_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/master/server-rc-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_ubuntu18.04_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/master/server-rc-(.*)-ubuntu18.04_x86_64((rc-build-type-gcs)).tar.gz


- name: bin_gpdb_clients_centos7_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/master/clients-rc-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_ubuntu18.04_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/master/clients-rc-(.*)-ubuntu18.04_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_centos7/bin_gpdb.tar.gz

- name: bin_gpdb_clients_centos7
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_centos7/bin_gpdb_clients.tar.gz

- name: server-build-centos7
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/master/server-build-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_ubuntu18.04/bin_gpdb.tar.gz

- name: bin_gpdb_clients_ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_ubuntu18.04/bin_gpdb_clients.tar.gz

- name: server-build-ubuntu18.04
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/master/server-build-(.*)-ubuntu18.04_x86_64((rc-build-type-gcs)).tar.gz


- name: terraform_windows
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project: {{google-project-id}}
      region: {{google-region}}
      region_zone: {{google-zone}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: gp-clients-windows-tests-google/

- name: bin_gpdb_clients_windows
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_windows/greenplum-clients-x86_64.tar.gz

- name: bin_gpdb_clients_windows_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/master/clients-rc-*-windows_x86_64((rc-build-type-gcs)).msi

- name: reduced-frequency-trigger
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
    start: {{reduced-frequency-trigger-start}}
    stop: {{reduced-frequency-trigger-stop}}


## ======================================================================
##    _       _
##   (_) ___ | |__  ___
##   | |/ _ \| '_ \/ __|
##   | | (_) | |_) \__ \
##  _/ |\___/|_.__/|___/
## |__/
## ======================================================================

jobs:

## ======================================================================
##  ____  _            _ _              _   _       _ _     _____         _
## |  _ \(_)_ __   ___| (_)_ __   ___  | | | |_ __ (_) |_  |_   _|__  ___| |_ ___
## | |_) | | '_ \ / _ \ | | '_ \ / _ \ | | | | '_ \| | __|   | |/ _ \/ __| __/ __|
## |  __/| | |_) |  __/ | | | | |  __/ | |_| | | | | | |_    | |  __/\__ \ |_\__ \
## |_|   |_| .__/ \___|_|_|_| |_|\___|  \___/|_| |_|_|\__|   |_|\___||___/\__|___/
##         |_|
## ======================================================================

- name: concourse_unit_tests
  plan:
    - in_parallel:
        steps:
        - get: bats_core_src
        - get: gpdb_src
          trigger: true
        - get: gpdb7-ubuntu18.04-build
    - task: run_unit_tests
      image: gpdb7-ubuntu18.04-build
      config:
        inputs:
          - name: bats_core_src
          - name: gpdb_src
        platform: linux
        run:
          path: bash
          args:
          - -exc
          - |
            python -m unittest discover --verbose -s gpdb_src/concourse/scripts/ -p *_test.py

            if ls gpdb_src/concourse/scripts/*.bats >/dev/null 2>&1; then
              bats_core_src/install.sh /usr/local

              cd gpdb_src/concourse
              bats -t scripts/*.bats
            fi

## ======================================================================
##   ____                      _ _
##  / ___|___  _ __ ___  _ __ (_) | ___
## | |   / _ \| '_ ` _ \| '_ \| | |/ _ \
## | |__| (_) | | | | | | |_) | | |  __/
##  \____\___/|_| |_| |_| .__/|_|_|\___|
##                      |_|
## ======================================================================

- name: compile_gpdb_centos7
  plan:
  - in_parallel:
      steps:
      - get: reduced-frequency-trigger
        trigger: ((reduced-frequency-trigger-flag))
      - get: gpdb_src
        trigger: ((gpdb_src-trigger-flag))
      - get: gpdb7-centos7-build
      - get: libquicklz-installer
        resource: libquicklz-centos7
      - get: libquicklz-devel-installer
        resource: libquicklz-devel-centos7
  - task: compile_gpdb
    image: gpdb7-centos7-build
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb_centos7
        params:
          file: gpdb_artifacts/bin_gpdb.tar.gz
      - put: bin_gpdb_clients_centos7
        params:
          file: gpdb_artifacts/gpdb-clients-centos7.tar.gz

- name: compile_gpdb_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: reduced-frequency-trigger
          trigger: ((reduced-frequency-trigger-flag))
        - get: gpdb_src
          trigger: ((gpdb_src-trigger-flag))
        - get: gpdb7-ubuntu18.04-build
        - get: libquicklz-installer
          resource: libquicklz-ubuntu18.04
    - task: compile_gpdb
      image: gpdb7-ubuntu18.04-build
      file: gpdb_src/concourse/tasks/compile_gpdb.yml
      params:
        CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
        TARGET_OS: ubuntu
        TARGET_OS_VERSION: "18.04"
        BLD_TARGETS: "clients"
        RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
    - in_parallel:
        steps:
        - put: bin_gpdb_ubuntu18.04
          params:
            file: gpdb_artifacts/bin_gpdb.tar.gz
        - put: bin_gpdb_clients_ubuntu18.04
          params:
            file: gpdb_artifacts/gpdb-clients-ubuntu18.04.tar.gz

- name: compile_gpdb_clients_windows
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
      - get: gpdb7-centos7-build
  - task: compile_gpdb_windows_remote
    file: gpdb_src/concourse/tasks/compile_gpdb_remote_windows.yml
    image: gpdb7-centos7-build
    params:
      REMOTE_HOST: {{remote_win_host_build}}
      REMOTE_PORT: {{remote_win_port_build}}
      REMOTE_USER: {{remote_win_user_build}}
      REMOTE_KEY: {{remote_win_key_build}}
  - put: bin_gpdb_clients_windows
    params:
      file: "gpdb_artifacts/greenplum-clients-x86_64.tar.gz"

- name: test_gpdb_clients_windows
  plan:
  - in_parallel:
      steps:
      - get: ccp_src
      - get: gpdb_src
        trigger: true
        passed: [compile_gpdb_centos7]
      - get: gpdb7-centos7-test
      - get: bin_gpdb_clients_windows
        passed: [compile_gpdb_clients_windows]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
  - put: terraform_windows
    params:
      action: create
      delete_on_failure: true
      generate_random_name: true
      terraform_source: ccp_src/gpdb_windows_client_test/
  - task: run_tests
    file: gpdb_src/concourse/tasks/windows_remote_test.yml
    image: gpdb7-centos7-test
    params:
      REMOTE_PORT: {{remote_win_port_test}}
      REMOTE_USER: {{remote_win_user_test}}
      REMOTE_KEY: {{remote_win_key_test}}
  ensure:
    put: terraform_windows
    params:
      action: destroy
      env_name_file: terraform_windows/name
      terraform_source: ccp_src/gpdb_windows_client_test/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy
## ======================================================================
##  ___ ______        __
## |_ _/ ___\ \      / /
##  | | |    \ \ /\ / /
##  | | |___  \ V  V /
## |___\____|  \_/\_/
## ======================================================================
- name: icw_gporca_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: gpdb7-centos7-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: gpdb7-centos7-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      TEST_BINARY_SWAP: {{test-binary-swap}}
      CONFIGURE_FLAGS: {{configure_flags}}
      DUMP_DB: "true"
  - put: icw_planner_centos7_dump
    params:
      file: sqldump/dump.sql.xz

- name: icw_gporca_ictcp_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: gpdb7-centos7-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=tcp -c optimizer=on' installcheck-world
      TEST_OS: centos

- name: icw_gporca_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - get: gpdb7-ubuntu18.04-test
    - task: ic_gpdb
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb7-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_ubuntu18.04
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          passed: [compile_gpdb_ubuntu18.04]
          resource: bin_gpdb_ubuntu18.04
          trigger: true
        - get: gpdb7-ubuntu18.04-test
    - task: ic_gpdb
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb7-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: {{configure_flags}}

- name: gate_icw_end
  plan:
  - in_parallel:
      steps:
      - get: bin_gpdb_centos7
        passed:
        - icw_gporca_centos7
        - icw_planner_centos7
        - icw_gporca_ictcp_centos7
        - icw_extensions_gpcloud_centos7
      - get: icw_planner_centos7_dump
        passed:
        - icw_planner_centos7
      - get: gpdb_src
        passed:
        - icw_gporca_centos7
        - icw_planner_centos7
        - icw_gporca_ictcp_centos7
        - icw_extensions_gpcloud_centos7
        trigger: true
  - put: bin_gpdb_centos7_icw_green
    params:
      file: bin_gpdb_centos7/bin_gpdb.tar.gz

## ======================================================================
##  ___ _   _ _____ _____ ____   ____ ___  _   _ _   _ _____ ____ _____
## |_ _| \ | |_   _| ____|  _ \ / ___/ _ \| \ | | \ | | ____/ ___|_   _|
##  | ||  \| | | | |  _| | |_) | |  | | | |  \| |  \| |  _|| |     | |
##  | || |\  | | | | |___|  _ <| |__| |_| | |\  | |\  | |__| |___  | |
## |___|_| \_| |_| |_____|_| \_\\____\___/|_| \_|_| \_|_____\____| |_|
## ======================================================================
- name: interconnect
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb
        passed: [compile_gpdb_centos7]
        resource: bin_gpdb_centos7
        trigger: true
      - get: gpdb7-centos7-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off'
        BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
      TEST_OS: centos

## ======================================================================
##  ____                                     ____
## |  _ \ ___  ___  ___  _   _ _ __ ___ ___ / ___|_ __ ___  _   _ _ __  ___
## | |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \ |  _| '__/ _ \| | | | '_ \/ __|
## |  _ <  __/\__ \ (_) | |_| | | | (_|  __/ |_| | | | (_) | |_| | |_) \__ \
## |_| \_\___||___/\___/ \__,_|_|  \___\___|\____|_|  \___/ \__,_| .__/|___/
##                                                               |_|
## ======================================================================

- name: gate_resource_groups_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_centos7
        trigger: true
      - get: bin_gpdb_centos7
        passed:
        - compile_gpdb_centos7


- name: resource_group_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_resource_groups_start]
      - get: gpdb_binary
        resource: bin_gpdb_centos7
        passed: [gate_resource_groups_start]
        trigger: true
      - get: ccp_src
      - get: ccp-image
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        PLATFORM: centos7
        instance_type: n1-standard-2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos7
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
    image: ccp-image
    params:
      TEST_OS: centos7
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed



## ======================================================================
##   ____ _     ___
##  / ___| |   |_ _|
## | |   | |    | |
## | |___| |___ | |
##  \____|_____|___|
## ======================================================================

- name: gate_cli_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_centos7
        trigger: true
      - get: bin_gpdb_centos7
        passed:
        - compile_gpdb_centos7

- name: check_centos
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_cli_start]
      - get: bin_gpdb
        resource: bin_gpdb_centos7
        passed: [gate_cli_start]
        trigger: true
      - get: gpdb7-centos7-test
  - task: check_centos
    file: gpdb_src/concourse/tasks/gpMgmt_check_gpdb.yml
    image: gpdb7-centos7-test
    params:
      TEST_OS: centos
      TEST_NAME: gpmgmt_unit_tests
  - task: publish_coverage
    image: gpdb7-centos7-test
    config:
      platform: linux
      inputs:
        - name: gpdb_src
        - name: coverage
      run:
        path: gpdb_src/concourse/scripts/gsutil_sync
        args: [ "./coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
      params:
        JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpmovemirrors
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpmovemirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
              TEST_NAME: gpmovemirrors
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpmovemirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpmovemirrors
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpmovemirrors_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpmovemirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpmovemirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
              

- name: gppkg
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gppkg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
              TEST_NAME: gppkg
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gppkg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gppkg
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gppkg_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gppkg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gppkg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster
              

- name: analyzedb
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: analyzedb_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
              TEST_NAME: analyzedb
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: analyzedb_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: analyzedb_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
              

- name: gpinitsystem
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpinitsystem_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpinitsystem
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpinitsystem_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpinitsystem_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
              

- name: gpstate
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpstate_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpstate
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpstate_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpstate_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
              

- name: replication_slots
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: replication_slots_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
              TEST_NAME: replication_slots
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: replication_slots_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: replication_slots_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
              

- name: gpactivatestandby
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpactivatestandby_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
              TEST_NAME: gpactivatestandby
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpactivatestandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpactivatestandby
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpactivatestandby_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpactivatestandby_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpactivatestandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
              

- name: gpinitstandby
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpinitstandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpinitstandby
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpinitstandby_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpinitstandby_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
              

- name: gpcheckcat
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckcat_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
              TEST_NAME: gpcheckcat
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpcheckcat_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpcheckcat
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpcheckcat_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpcheckcat_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpcheckcat_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
              

- name: gprecoverseg
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
              TEST_NAME: gprecoverseg
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gprecoverseg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gprecoverseg
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gprecoverseg_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gprecoverseg_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gprecoverseg_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
              

- name: gpaddmirrors
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpaddmirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
              TEST_NAME: gpaddmirrors
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpaddmirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpaddmirrors
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpaddmirrors_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpaddmirrors_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpaddmirrors_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
              

- name: gpconfig
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpconfig_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
              TEST_NAME: gpconfig
              LC_CTYPE: en_US.UTF-8
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpconfig_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpconfig
              LC_CTYPE: en_US.UTF-8
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpconfig_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpconfig_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
              LC_CTYPE: en_US.UTF-8
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpconfig_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
              LC_CTYPE: en_US.UTF-8

- name: gpssh-exkeys
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpssh-exkeys_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
              TEST_NAME: gpssh-exkeys
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpssh-exkeys_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpssh-exkeys
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpssh-exkeys_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                number_of_nodes: 4
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpssh-exkeys_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpssh-exkeys_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
              

- name: gpstart
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstart_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=concourse_cluster
              TEST_NAME: gpstart
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpstart_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpstart
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpstart_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstart_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpstart_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpstart --tags=~concourse_cluster,demo_cluster
              

- name: gpstop
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [gate_cli_start]
        - get: gpdb7-centos7-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: centos7
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstop_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: ccp-image
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
              TEST_NAME: gpstop
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
            output_mapping:
              coverage: ccp-coverage
          - task: publish_ccp_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: ccp-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))
        - do:
          - get: bin_gpdb
            resource: bin_gpdb_centos7
            passed: [gate_cli_start]
            trigger: true
          - task: gpstop_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-centos7-test
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
              TEST_NAME: gpstop
              
            output_mapping:
              coverage: demo-coverage
          - task: publish_demo_coverage
            image: gpdb7-centos7-test
            config:
              platform: linux
              inputs:
                - name: gpdb_src
                - name: demo-coverage
              run:
                path: gpdb_src/concourse/scripts/gsutil_sync
                args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
              params:
                JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpstop_ubuntu18
  plan:
    - in_parallel:
        steps:
        - get: gpdb_src
          params:
            submodules:
              - gpMgmt/bin/pythonSrc/ext
          passed: [compile_gpdb_ubuntu18.04]
        - get: gpdb7-ubuntu18.04-test
    - in_parallel:
        steps:
        - do:
          - get: gpdb_binary
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - get: ccp_src
          - put: terraform
            params:
              <<: *ccp_default_params
              vars:
                <<: *ccp_default_vars
                instance_type: n1-standard-2
                PLATFORM: ubuntu18.04
                
          - task: gen_cluster
            file: ccp_src/ci/tasks/gen_cluster.yml
            params:
              <<: *ccp_gen_cluster_default_params
              PLATFORM: ubuntu18.04
          - task: gpinitsystem
            file: ccp_src/ci/tasks/gpinitsystem.yml
          - task: gpstop_concourse_cluster_tests
            file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
            image: gpdb7-ubuntu18.04-test
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
              
            on_success:
              <<: *ccp_destroy
            ensure:
              <<: *set_failed
        - do:
          - get: bin_gpdb_ubuntu18.04
            resource: bin_gpdb_ubuntu18.04
            passed: [compile_gpdb_ubuntu18.04]
            trigger: true
          - task: gpstop_demo_cluster_tests
            file: gpdb_src/concourse/tasks/behave_gpdb.yml
            image: gpdb7-ubuntu18.04-test
            input_mapping:
              bin_gpdb: bin_gpdb_ubuntu18.04
            params:
              BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
              


- name: cli_cross_subnet
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-centos7-test
      - get: gpdb_binary
        resource: bin_gpdb_centos7
        passed: [gate_cli_start]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: alpine-docker
    - task: generate-ssh-keys
      image: alpine-docker
      config:
        platform: linux
        outputs:
          - name: ssh-extra-key
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client openssl
              ssh-keygen -b 4096 -t rsa -m PEM -f ssh-extra-key/key -N "" -C ""
              openssl rsa -in ssh-extra-key/key -pubout -out ssh-extra-key/key.pem
              sed -i 's/*//;s/ *$//' ssh-extra-key/key.pub
    - in_parallel:
      - do:
        - put: terraform_1
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              PLATFORM: centos7
              subnet: dynamic
              cluster_suffix: '-1'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_1
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_1
          output_mapping:
            cluster_env_files: cluster_1
      - do:
        - put: terraform_2
          params:
            <<: *ccp_default_params
            vars:
              instance_type: n1-standard-2
              PLATFORM: centos7
              subnet: toolshed
              cluster_suffix: '-2'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_2
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_2
          output_mapping:
            cluster_env_files: cluster_2
    - task: exchange_keys
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_1/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_2/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_2/.ssh/config
                  ssh $opts centos@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_2/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_2/.ssh/known_hosts
              done < cluster_1/etc_hostfile

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_2/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_1/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_1/.ssh/config
                  ssh $opts centos@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_1/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_1/.ssh/known_hosts
              done < cluster_2/etc_hostfile
    - task: combine_cluster_config_files
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        outputs:
          - name: cluster_env_files
        run:
          path: sh
          args:
            - -exc
            - |
              cp -r cluster_1/* cluster_env_files
              cp -r cluster_1/.ssh cluster_env_files
              cat cluster_2/hostfile_all >> cluster_env_files/hostfile_all
              cat cluster_2/etc_hostfile >> cluster_env_files/etc_hostfile
              cat cluster_2/hostfile_init >> cluster_env_files/hostfile_init

              cp cluster_2/.ssh/*.pem cluster_env_files/.ssh
              cat cluster_2/.ssh/known_hosts >> cluster_env_files/.ssh/known_hosts
              cat cluster_2/.ssh/config >> cluster_env_files/.ssh/config
              sed -i '/^Host mdw-1/ s/$/ mdw/' cluster_env_files/.ssh/config
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        GPINIT_STANDBY_MASTER: '-s mdw-2'
    - task: cross_subnet_tests
      file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
      image: ccp-image
      params:
        BEHAVE_FLAGS: --tags=cross_subnet
        TEST_NAME: cross_subnet
  on_success:
    <<: *ccp_destroy_two_clusters
  ensure:
    <<: *set_failed_two_clusters

- name: combine_cli_coverage
  plan:
    - in_parallel:
        steps:
        - get: gpdb7-centos7-test
        - get: gpdb_src
          passed:
            - compile_gpdb_centos7
        - get: bin_gpdb_centos7
          trigger: true
          passed:
            - check_centos
            - gpmovemirrors
            - gppkg
            - analyzedb
            - gpinitsystem
            - gpstate
            - replication_slots
            - gpactivatestandby
            - gpinitstandby
            - gpcheckcat
            - gprecoverseg
            - gpaddmirrors
            - gpconfig
            - gpssh-exkeys
            - gpstart
            - gpstop
    - task: combine_coverage
      image: gpdb7-centos7-test
      input_mapping:
        bin_gpdb: bin_gpdb_centos7
      config:
        platform: linux
        inputs:
          - name: gpdb_src
          - name: bin_gpdb
        run:
          path: gpdb_src/concourse/scripts/combine_cli_coverage.bash
          args: [ "gs://((coverage-bucket-name))/((pipeline-name))/", "((coverage-bucket-name))/((pipeline-name))" ]
        params:
          JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: pg_upgrade
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [icw_gporca_centos7]
      - get: bin_gpdb_centos7
        passed: [icw_gporca_centos7]
        trigger: true
      - get: icw_planner_centos7_dump
        passed: [icw_planner_centos7]
      - get: ccp_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-2
        PLATFORM: centos7
        number_of_nodes: 2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos7
    input_mapping:
      gpdb_binary: bin_gpdb_centos7
  - task: set_gpinitsystem_config
    file: gpdb_src/concourse/tasks/set_gpinitsystem_config.yml
    params:
      GPINITSYSTEM_CONFIG: gpdb_src/concourse/scripts/configurations/pg_upgrade_gpinitsystem_config
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: test_upgrade
    file: gpdb_src/concourse/tasks/test_upgrade.yml
    input_mapping:
      sqldump: icw_planner_centos7_dump
    params:
      NUMBER_OF_NODES: 2

- name: gpexpand
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
          - gpMgmt/bin/pythonSrc/ext
        passed: [icw_gporca_centos7]
      - get: gpdb_binary
        resource: bin_gpdb_centos7
        passed: [icw_gporca_centos7]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: icw_planner_centos7_dump
        passed: [icw_planner_centos7]
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-4
        PLATFORM: centos7
        number_of_nodes: 5
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: pre_run_test_setup
    file: gpdb_src/concourse/tasks/setup_for_gpexpand_to_make_new_gpdb.yml
    image: ccp-image
    input_mapping: {sqldump: icw_planner_centos7_dump}
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
    params:
      BEHAVE_FLAGS: --tags=gpexpand
    image: ccp-image
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed


 # end CLI test_sections


## ======================================================================
##  ____      _
## |  _ \ ___| | ___  __ _ ___  ___
## | |_) / _ \ |/ _ \/ _` / __|/ _ \
## |  _ <  __/ |  __/ (_| \__ \  __/
## |_| \_\___|_|\___|\__,_|___/\___|
## ======================================================================

- name: gate_release_candidate_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - compile_gpdb_centos7
        - compile_gpdb_ubuntu18.04
        - icw_gporca_centos7
        - icw_planner_centos7
        - icw_gporca_ictcp_centos7
        - icw_extensions_gpcloud_centos7
        - resource_group_centos7
        - icw_gporca_ubuntu18.04
        - icw_planner_ubuntu18.04
        - test_gpdb_clients_windows
        - cli_cross_subnet
        - gpmovemirrors
        - gpmovemirrors_ubuntu18
        - gppkg
        - gppkg_ubuntu18
        - analyzedb
        - analyzedb_ubuntu18
        - gpinitsystem
        - gpinitsystem_ubuntu18
        - gpstate
        - gpstate_ubuntu18
        - replication_slots
        - replication_slots_ubuntu18
        - gpactivatestandby
        - gpactivatestandby_ubuntu18
        - gpinitstandby
        - gpinitstandby_ubuntu18
        - gpcheckcat
        - gpcheckcat_ubuntu18
        - gprecoverseg
        - gprecoverseg_ubuntu18
        - gpaddmirrors
        - gpaddmirrors_ubuntu18
        - gpconfig
        - gpconfig_ubuntu18
        - gpssh-exkeys
        - gpssh-exkeys_ubuntu18
        - gpstart
        - gpstart_ubuntu18
        - gpstop
        - gpstop_ubuntu18
 ##     - madlib_build_gppkg
 ##     - MADlib_Test_orca_centos7
 ##     - MADlib_Test_planner_centos7
        - pg_upgrade
        - gpexpand
        - check_centos
        - interconnect
      - get: bin_gpdb_centos7
        trigger: true
        passed:
        - compile_gpdb_centos7
        - icw_planner_centos7
        - icw_gporca_centos7
        - icw_gporca_ictcp_centos7
        - icw_extensions_gpcloud_centos7
        - resource_group_centos7
        - cli_cross_subnet
        - gpmovemirrors
        - gppkg
        - analyzedb
        - gpinitsystem
        - gpstate
        - replication_slots
        - gpactivatestandby
        - gpinitstandby
        - gpcheckcat
        - gprecoverseg
        - gpaddmirrors
        - gpconfig
        - gpssh-exkeys
        - gpstart
        - gpstop
 ##     - MADlib_Test_orca_centos7
 ##     - MADlib_Test_planner_centos7
        - gpexpand
        - check_centos
        - interconnect
      - get: bin_gpdb_clients_centos7
        passed:
        - compile_gpdb_centos7
      - get: bin_gpdb_ubuntu18.04
        trigger: true
        passed:
        - compile_gpdb_ubuntu18.04
        - icw_gporca_ubuntu18.04
        - icw_planner_ubuntu18.04
        - gpmovemirrors_ubuntu18
        - gppkg_ubuntu18
        - analyzedb_ubuntu18
        - gpinitsystem_ubuntu18
        - gpstate_ubuntu18
        - replication_slots_ubuntu18
        - gpactivatestandby_ubuntu18
        - gpinitstandby_ubuntu18
        - gpcheckcat_ubuntu18
        - gprecoverseg_ubuntu18
        - gpaddmirrors_ubuntu18
        - gpconfig_ubuntu18
        - gpssh-exkeys_ubuntu18
        - gpstart_ubuntu18
        - gpstop_ubuntu18
      - get: bin_gpdb_clients_ubuntu18.04
        passed:
        - compile_gpdb_ubuntu18.04
      - get: bin_gpdb_clients_windows
        passed:
        - test_gpdb_clients_windows

- name: Publish Server Builds
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - compile_gpdb_centos7
        - compile_gpdb_ubuntu18.04
      - get: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
      - get: bin_gpdb_ubuntu18.04
        passed: [compile_gpdb_ubuntu18.04]
  - task: rename server build artifacts
    file: gpdb_src/concourse/tasks/rename-server-build.yml
    params:
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: server-build-centos7
        params:
          file: output/server-build-*-rhel7*.tar.gz
      - put: server-build-ubuntu18.04
        params:
          file: output/server-build-*-ubuntu18.04*.tar.gz

- name: Release_Candidate
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_centos7
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_ubuntu18.04
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_centos7
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_ubuntu18.04
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb_clients_windows
        passed: [gate_release_candidate_start]
      - get: gpdb7-centos7-build
  - in_parallel:
      steps:
      - task: rename_rc_artifacts
        file: gpdb_src/concourse/tasks/rename_rc_artifacts.yml
        params:
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
      - task: verify_gpdb_versions
        file: gpdb_src/concourse/tasks/verify_gpdb_versions.yml
  - in_parallel:
      steps:
      - put: bin_gpdb_centos7_rc
        params:
          file: "release_candidates/server-rc-*rhel7*.tar.gz"
      - put: bin_gpdb_ubuntu18.04_rc
        params:
          file: "release_candidates/server-rc-*ubuntu18.04*.tar.gz"
      - put: bin_gpdb_clients_centos7_rc
        params:
          file: "release_candidates/clients-rc-*rhel7*.tar.gz"
      - put: bin_gpdb_clients_ubuntu18.04_rc
        params:
          file: "release_candidates/clients-rc-*ubuntu18.04*.tar.gz"
      - put: bin_gpdb_clients_windows_rc
        params:
          file: "release_candidates/clients-rc-*-windows*.msi"


## ======================================================================
##    __      _                 _
##   /__\_  _| |_ ___ _ __  ___(_) ___  _ __  ___
##  /_\ \ \/ / __/ _ \ '_ \/ __| |/ _ \| '_ \/ __|
## //__  >  <| ||  __/ | | \__ \ | (_) | | | \__ \
## \__/ /_/\_\\__\___|_| |_|___/_|\___/|_| |_|___/
## ======================================================================

- name: icw_extensions_gpcloud_centos7
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_centos7]
        trigger: true
      - get: bin_gpdb_centos7
        passed: [compile_gpdb_centos7]
      - get: gpdb7-centos7-test
  - in_parallel:
      steps:
      - task: unit_tests_gpcloud
        file: gpdb_src/concourse/tasks/unit_tests_gpcloud.yml
        image: gpdb7-centos7-test
        params:
          TARGET_OS: centos
      - task: regression_tests_gpcloud_centos
        input_mapping:
          bin_gpdb: bin_gpdb_centos7
        file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
        image: gpdb7-centos7-test
        params:
          gpcloud_access_key_id: {{gpcloud-access-key-id}}
          gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
          TARGET_OS: centos
      - task: gpcheckcloud_tests_gpcloud_centos
        input_mapping:
          bin_gpdb: bin_gpdb_centos7
        file: gpdb_src/concourse/tasks/gpcheckcloud_tests_gpcloud.yml
        image: gpdb7-centos7-test
        params:
          gpcloud_access_key_id: {{gpcloud-access-key-id}}
          gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
          TARGET_OS: centos
