<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_id4_pfb_3lb">
  <title>About View Storage in Greenplum Database</title>
  <body>
    <p>A view is similar to a table, both are relations - that is "something with columns". All such
      objects are stored in the catalog table <xref
        href="../../ref_guide/system_catalogs/pg_class.xml"><codeph>pg_class</codeph></xref>. These
      are the general differences:</p>
    <ul id="ul_lrc_15l_flb">
      <li>A view has no data files (because it holds no data).</li>
      <li>The value of <codeph>pg_class.relkind</codeph> for a view is <codeph>v</codeph> rather
        than <codeph>r</codeph>.</li>
      <li>A view has an <codeph>ON SELECT</codeph> query rewrite rule called
          <codeph>_RETURN</codeph>. <p>The rewrite rule contains the definition of the view and is
          stored in the <codeph>ev_action</codeph> column of the <xref
            href="../../ref_guide/system_catalogs/pg_rewrite.xml"><codeph>pg_rewrite</codeph></xref>
          catalog table.</p></li>
    </ul>
    <p>For more technical information about views, see the PostgreSQL documentation about <xref
        href="https://www.postgresql.org/docs/9.4/rules-views.html" format="html">Views and the Rule
        System</xref>.</p>
    <p>Also, a view definition is <i>not</i> stored as a string, but in the form of a query parse
      tree. Views are parsed when they are created, which has several consequences:</p>
    <ul id="ul_mrc_15l_flb">
      <li>Object names are resolved during <codeph>CREATE VIEW</codeph>, so the current setting of
          <codeph>search_path</codeph> affects the view definition.</li>
      <li>Objects are referred to by their internal immutable object ID rather than by their name.
        Consequently, renaming an object or column referenced in a view definition can be performed
        without dropping the view.</li>
      <li>Greenplum Database can determine exactly which objects are used in the view definition, so
        it can add dependencies on them.</li>
    </ul>
    <p>Note that the way Greenplum Database handles views is quite different from the way Greenplum
      Database handles functions: function bodies are stored as strings and are not parsed when they
      are created. Consequently, Greenplum Database does not know on which objects a given function
      depends.</p>
    <section>
      <title>Where View Dependency Information is Stored</title>
      <p>These system catalog tables contain the information used to determine the tables on which a
        view depends.<ul id="ul_wgn_qrt_jlb">
          <li><xref href="../../ref_guide/system_catalogs/pg_class.xml"
              ><codeph>pg_class</codeph></xref> - object information including tables and views. The
              <codeph>relkind</codeph> column describes the type of object.</li>
          <li><xref href="../../ref_guide/system_catalogs/pg_depend.xml"
              ><codeph>pg_depend</codeph></xref> - object dependency information for
            database-specific (non-shared) objects.</li>
          <li><xref href="../../ref_guide/system_catalogs/pg_rewrite.xml"
                ><codeph>pg_rewrite</codeph></xref> - rewrite rules for tables and views. </li>
          <li><xref href="../../ref_guide/system_catalogs/pg_attribute.xml"
                ><codeph>pg_attribute</codeph></xref> - information about table columns.</li>
          <li><xref href="../../ref_guide/system_catalogs/pg_namespace.xml"
                ><codeph>pg_namespace</codeph></xref> - information about schemas (namespaces).</li>
        </ul></p>
      <p>It is important to note that there is no direct dependency of a view on the objects it
        uses: the dependent object is actually the view's rewrite rule. That adds another layer of
        indirection to view dependency information.</p>
    </section>
  </body>
</topic>
