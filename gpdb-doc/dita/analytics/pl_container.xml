<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pz212122">PL/Container Language</title>
  <body>
    <p>Pl/Container enables users to run Greenplum procedural language functions inside a Docker
      container, to avoid security risks associated with executing Python or R code on Greenplum
      segment hosts. This topic covers information about the architecture, installation, and setup
      of PL/Container:</p>
    <ul>
      <li id="pz219023"><xref href="#about_pl_container" type="topic" format="dita"/></li>
      <li id="pz213664" otherprops="pivotal"><xref href="#topic3" type="topic" format="dita"/></li>
      <li><xref href="#upgrade_plcontainer" type="topic" format="dita"/></li>
      <li id="pz213668"><xref href="#uninstall_plcontainer" type="topic" format="dita"/>
      </li>
      <li><xref href="#topic_kds_plk_rbb" format="dita"/></li>
    </ul>
    <p>For detailed information about using PL/Container, refer to:</p>
    <p>
      <ul id="ul_ozt_t1j_blb">
        <li><xref href="pl_container_using.xml#topic_resmgmt">PL/Container Resource
            Management</xref></li>
        <li><xref href="pl_container_using.xml#topic_rh3_p3q_dw">PL/Container Functions</xref></li>
      </ul>
    </p>
    <p>The PL/Container language extension is available as an open source module. For information
      about the module, see the README file in the GitHub repository at <xref
        href="https://github.com/greenplum-db/plcontainer" format="html" scope="external"
        >https://github.com/greenplum-db/plcontainer</xref></p>
  </body>
  <topic id="about_pl_container" xml:lang="en">
    <title>About the PL/Container Language Extension</title>
    <body>
      <p>The Greenplum Database PL/Container language extension allows users to create and run
        PL/Python or PL/R user-defined functions (UDFs) securely, inside a Docker container. Docker
        provides the ability to package and run an application in a loosely isolated environment
        called a container. For information about Docker, see the <xref
          href="https://www.docker.com" format="html">Docker web site</xref>. </p>
      <p>Running UDFs inside the Docker container ensures that:</p>
      <ul>
        <li> The function execution process takes place in a separate environment and allows
          decoupling of the data processing. SQL operators such as "scan," "filter," and "project"
          are executed at the query executor (QE) side, and advanced data analysis is executed at
          the container side. </li>
        <li>User code cannot access the OS or the file system of the local host.</li>
        <li>User code cannot introduce any security risks.</li>
        <li>Functions cannot connect back to the Greenplum Database if the container is started with
          limited or no network access.</li>
      </ul>
      
      <section id="plcontainer_arch">
        <title>PL/Container Architecture</title>
        
        <fig id="pl_container_image">
          <image placement="break" href="graphics/pl_container_architecture.png" width="650"
            height="550" align="center"/>
        </fig>
        
        <p><b>Example of the process flow</b>:</p>
        <p>Consider a query that selects table data using all available segments, and transforms the
          data using a PL/Container function. On the first call to a function in a segment
          container, the query executor on the master host starts the container on that segment
          host. It then contacts the running container to obtain the results. The container might
          respond with a Service Provider Interface (SPI) - a SQL query executed by the container to
          get some data back from the database - returning the result to the query executor.</p>
        <p>A container running in standby mode waits on the socket and does not consume any CPU
          resources. PL/Container memory consumption depends on the amount of data cached in global
          dictionaries.</p>
        <p>The container connection is closed by closing the Greenplum Database session that started
          the container, and the container shuts down.</p>
        
      </section>
      <section>
        <title>About PL/Container 3 Beta</title>
        <p>Greenplum Database 6.5 introduces PL/Container version 3 Beta, which:<ul
            id="ul_jj3_lyq_blb">
            <li>Provides support for the new GreenplumR interface.</li>
            <li>Reduces the number of processes created by PL/Container, in order to save system
              resources.</li>
            <li>Supports more containers running concurrently.</li>
            <li>Includes improved log messages to help diagnose problems.</li>
          </ul></p>
        <p>PL/Container 3 is currently a Beta feature, and provides only an Beta R Docker image for
          executing functions; Python images are not yet available. Save and uninstall any existing
          PL/Container software before you install PL/Container 3 Beta.</p>
      </section>
    </body>
  </topic>
  
  <topic id="topic3" xml:lang="en">
    <title id="pz214493">Install PL/Container </title>
    
    <body>
    <section>This topic includes how to: <p/><ul>
          <li><xref href="#install_docker" format="dita" scope="local">Install Docker</xref></li>
          <li><xref href="#topic3/install_pl_utility" format="dita">Install PL/Container</xref></li>
          <li><xref href="#topic3/install_docker_images" format="dita">Install the PL/Container
              Docker images</xref></li>
          <li><xref href="#topic3/test_installation" format="dita">Test the PL/Container
              installation</xref></li>
        </ul><p>The following sections describe these tasks in detail.</p>
      </section>
      
    <section id="requirements">
          <title>Prerequisites</title>
        <ul>
          <li>For PL/Container 2.1.x use Greenplum Database 6 on CentOS 7.x (or later), RHEL 7.x (or
            later), or Ubuntu 18.04. <note>PL/Container 2.1.x supports Docker images with Python 3
              installed.</note></li>
          <li>For PL/Container 3 Beta use Greenplum Database 6.1 or later on CentOS 7.x (or later),
            RHEL 7.x (or later), or Ubuntu 18.04.</li>
          <li>The minimum Linux OS kernel version supported is 3.10. To verfiy your kernel release
            use: <codeblock>$ uname -r</codeblock>
          </li>
          <li>The minimum Docker versions on all hosts needs to be Docker 19.03.</li>
        </ul>
      
    </section>
    
    <section id="install_docker">
        <title>Install Docker</title>
        <p>To use PL/Container you need to install Docker on all Greenplum Database host systems.
          These instructions show how to set up the Docker service on CentOS 7 but RHEL 7 is a
          similar process.</p>
        <p>These steps install the docker package and start the Docker service as a user with sudo
          privileges. </p>
        <ol>
          <li>Ensure the user has sudo privileges or is root.</li>
          <li>Install the dependencies required for
            Docker:<codeblock>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</codeblock></li>
          <li>Add the Docker
            repo:<codeblock>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</codeblock></li>
          <li>Update yum cache:<codeblock>sudo yum makecache fast</codeblock></li>
          <li>Install Docker:<codeblock>sudo yum -y install docker-ce</codeblock></li>
          <li>Start Docker daemon:<codeblock>sudo systemctl start docker</codeblock></li>
          <li>On each Greenplum Database host, the <codeph>gpadmin</codeph> user should be part of
            the docker group for the user to be able to manage Docker images and containers. Assign
            the Greenplum Database administrator <codeph>gpadmin</codeph> to the group
              <codeph>docker</codeph>: <codeblock>sudo usermod -aG docker gpadmin</codeblock></li>
          <li>Exit the session and login again to update the privileges.</li>
          <li>Configure Docker to start when the host system
            starts:<codeblock>sudo systemctl enable docker.service</codeblock><codeblock>sudo systemctl start docker.service</codeblock></li>
          <li>Run a Docker command to test the Docker installation. This command lists the currently
            running Docker containers. <codeblock>docker ps</codeblock></li>
          <li>After you install Docker on all Greenplum Database hosts, restart the Greenplum
            Database system to give Greenplum Database access to Docker.
            <codeblock>gpstop -ra</codeblock></li>
        </ol>
        <p>For a list of observations while using Docker and PL/Container, see the <xref
            href="#plc_notes">Notes</xref> section. For a list of Docker reference documentation,
          see <xref href="#topic_kds_plk_rbb">Docker References</xref>.</p>
      </section>
      
    <section id="install_pl_utility" otherprops="pivotal">
        <title>Install PL/Container </title>
        <!--Pivotal content-->
        <p>Install the PL/Container language extension using the <codeph>gppkg</codeph> utility.</p>
        <ol id="ul_w5b_nzp_dw">
          <li>Download the "PL/Container for RHEL 7" package that applies to your Greenplum Database
            version, from the <xref href="https://network.pivotal.io/products/pivotal-gpdb/"
              format="html" scope="external">VMware Tanzu Network</xref>. PL/Container is listed
            under Greenplum Procedural Languages. </li>
          <li>As <codeph>gpadmin</codeph>, copy the PL/Container language extension package to the
            master host.</li>
          <li>Run the package installation
            command:<codeblock>gppkg -i plcontainer-2.1.1-rhel7-x86_64.gppkg</codeblock></li>
          <li>Source the file
            <codeph>$GPHOME/greenplum_path.sh</codeph>:<codeblock>source $GPHOME/greenplum_path.sh</codeblock></li>
          <li>Make sure Greenplum Database is up and running:<codeblock>gpstate -s</codeblock>If
            it's not, start it:<codeblock>gpstart -a</codeblock></li>
          <li>For PL/Container version 3 Beta only, add the <codeph>plc_coordinator</codeph>
            shared library to the Greenplum Database <codeph>shared_preload_libraries</codeph>
            server configuration parameter. Be sure to retain any previous setting of the
            parameter. For example:<codeblock>gpconfig -s shared_preload_libraries
Values on all segments are consistent
GUC          : shared_preload_libraries
Master  value: diskquota
Segment value: diskquota
gpconfig -c shared_preload_libraries -v 'diskquota,plc_coordinator'</codeblock></li>
          <li>Restart Greenplum Database:<codeblock>gpstop -ra</codeblock></li>
          <li>Login into one of the available databases, for example:
            <codeblock>psql postgres</codeblock></li>
          <li>Register the PL/Container extension, which installs the <codeph>plcontainer</codeph>
              utility:<codeblock>CREATE EXTENSION plcontainer; </codeblock><p>You'll need to
              register the utility separately on each database that might need the PL/Container
              functionality. </p></li>
        </ol>
      </section>
    
    <section id="install_docker_images">
        <title>Install PL/Container Docker Images</title>
        <p>Install the Docker images that PL/Container will use to create language-specific
          containers to run the UDFs.</p>
        <!--oss only content-->
        <p otherprops="oss-only">The PL/Container open source module contains dockerfiles to build
          Docker images that can be used with PL/Container. You can build a Docker image to run
          PL/Python UDFs and a Docker image to run PL/R UDFs. See the dockerfiles in the GitHub
          repository at <xref href="https://github.com/greenplum-db/plcontainer" format="html"
            scope="external">https://github.com/greenplum-db/plcontainer</xref>.</p>
        <!--Pivotal content-->
        <ul id="ul_h5t_sbz_vkb">
          <li>Download the files that contain the Docker images from the <xref
              href="https://network.pivotal.io" format="html" scope="external">VMware Tanzu
              Network</xref>. For example, for Greenplum 6.5, click on "PL/Container Docker Image
            for Python 2.1.1" which downloads <b>plcontainer-python-image-2.1.1-gp6.tar.gz </b> with
            Python 2.7.12 and the <i>Python Data Science Module Package</i>. <p>If you require
              different images from the ones provided by Pivotal Greenplum, you can create custom
              Docker images, install the image and add the image to the PL/ Container configuration.
            </p></li>
          <li>If you are using PL/Container 3 Beta, note that this Beta version is compatible only
            with the associated <filepath>plcontainer-r-image-3.0.0-beta-gp6.tar.gz</filepath>
            image.</li>
          <li>
            <p>Use the <codeph>plcontainer image-add</codeph> command to install an image on
              all Greenplum Database hosts. Provide the <codeph>-f</codeph> option to specify
              the file system location of a downloaded image file. For example: </p>
            <codeblock># Install a Python 2 based Docker image
plcontainer image-add -f /home/gpadmin/plcontainer-python-image-2.1.1-gp6.tar.gz
            
# Install a Python 3 based Docker image
plcontainer image-add -f /home/gpadmin/plcontainer-python3-image-2.1.1-gp6.tar.gz
            
# Install an R based Docker image
plcontainer image-add -f /home/gpadmin/plcontainer-r-image-2.1.1-gp6.tar.gz

# Install the Beta R image for use with PL/Container 3.0.0 Beta
plcontainer image-add -f /home/gpadmin/plcontainer-r-image-3.0.0-beta-gp6.tar.gz</codeblock>
            <p>The utility displays progress information, similar to:</p>
            <codeblock>20200127:21:54:43:004607 plcontainer:mdw:gpadmin-[INFO]:-Checking whether docker is installed on all hosts...
20200127:21:54:43:004607 plcontainer:mdw:gpadmin-[INFO]:-Distributing image file /home/gpadmin/plcontainer-python-images-1.5.0.tar to all hosts...
20200127:21:54:55:004607 plcontainer:mdw:gpadmin-[INFO]:-Loading image on all hosts...
20200127:21:55:37:004607 plcontainer:mdw:gpadmin-[INFO]:-Removing temporary image files on all hosts...</codeblock>
            <p>By default, the <codeph>image-add</codeph> command copies the image to each Greenplum
              Database segment and standby master host, and installs the image. When you specify
              the <codeph>[-ulc | --use_local_copy]</codeph> option, <codeph>plcontainer</codeph>
              installs the image only on the host on which you execute the command. Use this option
              when the PL/Container image already resides on disk on a host.</p>
            <p>For more information on <codeph>image-add</codeph> options, visit the <xref
                href="../utility_guide/ref/plcontainer.xml#topic_rw3_52s_dw">plcontainer </xref> reference page. </p>
          </li>
          <li>To display the installed Docker images on the local host use:
              <codeblock>$ plcontainer image-list</codeblock><simpletable frame="all"
              relcolwidth="1.0* 1.0* 1.0* 1.0*" id="simpletable_xqr_cdz_vkb">
              <sthead>
                <stentry>REPOSITORY</stentry>
                <stentry>TAG</stentry>
                <stentry>IMAGE ID</stentry>
                <stentry>CREATED</stentry>
              </sthead>
              <strow>
                <stentry> pivotaldata/plcontainer_r_shared</stentry>
                <stentry>devel</stentry>
                <stentry>7427f920669d</stentry>
                <stentry>10 months ago</stentry>
              </strow>
              <strow>
                <stentry> pivotaldata/plcontainer_python_shared</stentry>
                <stentry>devel</stentry>
                <stentry>e36827eba53e</stentry>
                <stentry>10 months ago</stentry>
              </strow>
              <strow>
                <stentry> pivotaldata/plcontainer_python3_shared</stentry>
                <stentry>devel</stentry>
                <stentry>y32827ebe55b</stentry>
                <stentry>5 months ago</stentry>
              </strow>
            </simpletable></li>
          <li><p> Add the image information to the PL/Container configuration file using
                <codeph>plcontainer runtime-add</codeph>, to allow PL/Container to associate
              containers with specified Docker images.</p><p>Use the <codeph>-r</codeph> option to
              specify your own user defined runtime ID name, use the <codeph>-i</codeph> option to
              specify the Docker image, and the <codeph>-l</codeph> option to specify the Docker
              image language. When there are multiple versions of the same docker image, for example
              1.0.0 or 1.2.0, specify the TAG version using ":" after the image name.
            </p><codeblock># Add a Python 2 based runtime
plcontainer runtime-add -r plc_python_shared -i pivotaldata/plcontainer_python_shared:devel -l python
            
# Add a Python 3 based runtime that is supported with PL/Container 2.1.x
plcontainer runtime-add -r plc_python3_shared -i pivotaldata/plcontainer_python3_shared:devel -l python3
            
# Add an R based runtime
plcontainer runtime-add -r plc_r_shared -i pivotaldata/plcontainer_r_shared:devel -l r</codeblock>The
            utility displays progress information as it updates the PL/Container configuration file
            on the Greenplum Database instances. <p>For details on other
                <codeph>runtime-add</codeph> options, see the <xref
                href="../utility_guide/ref/plcontainer.xml#topic_rw3_52s_dw">plcontainer</xref>
              reference page. </p></li>
          <li>Optional: Use Greenplum Database resource groups to manage and limit the total CPU and
            memory resources of containers in PL/Container runtimes. In this example, the Python
            runtime will be used with a preconfigured resource group
              16391:.<codeblock>plcontainer runtime-add -r plc_python_shared -i pivotaldata/plcontainer_python_shared:devel -l
      python -s resource_group_id=16391</codeblock><p>For
              more information about enabling, configuring, and using Greenplum Database resource
              groups with PL/Container, see <xref href="pl_container_using.xml#topic_resmgmt"
                >PL/Container Resource Management </xref> . </p></li>
        </ul>
        <p>You can now create a simple function to test your PL/Container installation. </p>
      </section>
      <section id="test_installation">
        <title>Test the PL/Container Installation</title>
        <p>List the names of the runtimes your created and added to the PL/Container XML
          file:<codeblock>plcontainer runtime-show
</codeblock></p>
        <p>Which will show a list of all installed
          runtimes:<codeblock>PL/Container Runtime Configuration: 
---------------------------------------------------------
  Runtime ID: plc_python_shared
  Linked Docker Image: pivotaldata/plcontainer_python_shared:devel
  Runtime Setting(s): 
  Shared Directory: 
  ---- Shared Directory From HOST '/usr/local/greenplum-db/./bin/plcontainer_clients' to Container '/clientdir', access mode is 'ro'
---------------------------------------------------------

</codeblock>
        </p>
        <p>You can also view the PL/Container configuration information with the <codeph>plcontainer
            runtime-show -r &lt;runtime_id></codeph> command. You can view the PL/Container
          configuration XML file with the <codeph>plcontainer runtime-edit</codeph> command. </p>
        <p>Use the <codeph>psql</codeph> utility and select an existing database: </p>
        <codeblock>psql postgres;</codeblock>
        <p>If the PL/Container extension is not registered with the selected database, first enable
          it using: </p>
        <codeblock>postgres=# CREATE EXTENSION plcontainer;</codeblock>
        <p>Create a simple function to test your installation; in the example, the function will use
          the runtime <codeph>plc_python_shared</codeph>:</p>
        <codeblock>postgres=# CREATE FUNCTION dummyPython() RETURNS text AS $$
# container: plc_python_shared
return 'hello from Python'
$$ LANGUAGE plcontainer;</codeblock>
        <p>And test the function using:</p>
        <codeblock>postgres=# SELECT dummyPython();
    dummypython    
-------------------
 hello from Python
(1 row)
</codeblock>
        <p>Similarly, to test the R
          runtime:<codeblock>postgres=# CREATE FUNCTION dummyR() RETURNS text AS $$
# container: plc_r_shared
return ('hello from R')
$$ LANGUAGE plcontainer;
CREATE FUNCTION
postgres=# select dummyR();
    dummyr    
--------------
 hello from R
(1 row)</codeblock></p>
        <p>For further details and examples about using PL/Container functions, see <xref
            href="pl_container_using.xml#topic_kwg_qfg_mjb">PL/Container Functions </xref>.</p>
      </section>
    </body>
 </topic>
  
    <topic id="upgrade_plcontainer">
      <title>Upgrade PL/Container</title>
      <body>
        <p>To upgrade PL/Container, you save the current configuration, upgrade PL/Container, and
        then restore the configuration after upgrade. There is no need to update the Docker images
        when you upgrade PL/Container.</p>
        <note>Before you perform this upgrade procedure, ensure that you have migrated your
          PL/Container package from your previous Greenplum Database installation to your new
          Greenplum Database installation. Refer to the <xref
            href="../utility_guide/ref/gppkg.xml#topic1" format="dita" scope="peer">gppkg</xref>
          command for package installation and migration information.</note>
      <note>You cannot upgrade to PL/Container 3 Beta. To install PL/Container 3 Beta, first save
        and then uninstall your existing PL/Container software. Then follow the instructions in
          <xref href="#topic3/install_pl_utility" format="dita"/>.</note>
        <p>To upgrade, perform the following procedure:  
          <ol id="ol_l1j_bml_vkb">
            <li>Save the PL/Container configuration. For example, to save the configuration to a
            file named <codeph>plcontainer202-backup.xml</codeph> in the local
            directory:<codeblock>$ plcontainer runtime-backup -f plcontainer202-backup.xml</codeblock></li>
            <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the
                <codeph>-u</codeph> option to update the PL/Container language extension. For
              example, the following command updates the PL/Container language extension to version
              2.1.1 on a Linux
              system:<codeblock>$ gppkg -u plcontainer-2.1.1-gp6-rhel7_x86_64.gppkg</codeblock></li>
            <li>Source the Greenplum Database environment file
                <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>$ source $GPHOME/greenplum_path.sh</codeblock></li>
            <li>Restore the PL/Container configuration that you saved in a previous step:
            <codeblock>$ plcontainer runtime-restore -f plcontainer202-backup.xml</codeblock></li>
            <li>Restart Greenplum Database.<codeblock>$ gpstop -ra</codeblock></li>
            <li>You do not need to re-register the PL/Container extension in the databases in which
            you previously created the extension but ensure that you register the PL/Container
            extension in each new database that will run PL/Container UDFs. For example, the
            following command registers PL/Container in a database named <codeph>mytest</codeph>:
              <codeblock>$ psql -d mytest -c 'CREATE EXTENSION plcontainer;'</codeblock><p>The
              command also creates PL/Container-specific functions and views.</p></li>
          </ol></p>
    </body>
    </topic>

  
  <topic id="uninstall_plcontainer" xml:lang="en">
    <title id="pz213704">Uninstall PL/Container</title>
    <body>
      <p>To uninstall PL/Container, remove Docker containers and images, and then remove the
        PL/Container support from Greenplum Database.</p>
      <p>When you remove support for PL/Container, the <codeph>plcontainer</codeph> user-defined
        functions that you created in the database will no longer work. </p>
    </body>
    <topic id="topic_rnb_4s5_lw">
      <title>Uninstall Docker Containers and Images</title>
      <body>
        <p>On the Greenplum Database hosts, uninstall the Docker containers and images that are no
          longer required. </p>
        <p>The <codeph>plcontainer image-list</codeph> command lists the Docker images that are
          installed on the local Greenplum Database host. </p>
        <p>The <codeph>plcontainer image-delete</codeph> command deletes a specified Docker image
          from all Greenplum Database hosts. </p>
        <p>Some Docker containers might exist on a host if the containers were not managed by
          PL/Container. You might need to remove the containers with Docker commands. These
            <codeph>docker</codeph> commands manage Docker containers and images on a local host.<ul
            id="ul_emd_ts5_lw">
            <li>The command <codeph>docker ps -a</codeph> lists all containers on a host. The
              command <codeph>docker stop</codeph> stops a container.</li>
            <li>The command <codeph>docker images</codeph> lists the images on a host.</li>
            <li>The command <codeph>docker rmi</codeph> removes images.</li>
            <li>The command <codeph>docker rm</codeph> removes containers. </li>
          </ul></p>
      </body>
    </topic>
    <topic xml:lang="en" id="topic_qnb_3cj_kw">
      <title>Remove PL/Container Support for a Database</title>
      <body>
        <p>To remove support for PL/Container,  drop the extension from the database. Use the
            <codeph>psql</codeph> utility with <codeph>DROP EXTENION</codeph> command (using
            <codeph>-c</codeph>) to remove PL/Container from <codeph>mytest</codeph> database.</p>
        <codeblock>psql -d mytest -c 'DROP EXTENSION plcontainer CASCADE;'</codeblock>
        <p>The <codeph>CASCADE</codeph> keyword drops PL/Container-specific functions and views.</p>
      </body>
    </topic>
    <topic id="topic_llg_d4w_blb">
      <title>Remove PL/Container 3 Beta Shared Library</title>
      <body>
        <p>This step is required only if you have installed PL/Container 3 Beta. Before you remove
          the extension from your system with <codeph>gppkg</codeph>, remove the shared library
          configuration for the <codeph>plc_coordinator</codeph> process:</p>
        <ol>
          <li>Examine the <codeph>shared_preload_libraries</codeph> server configuration
            parameter setting.<codeblock>$ gpconfig -s shared_preload_libraries</codeblock><ul>
              <li>If <codeph>plc_coordinator</codeph> is the only library listed, remove
                the configuration parameter setting: <codeblock>$ gpconfig -r shared_preload_libraries</codeblock>
                <p>Removing a server configuration parameter comments out the setting in the
                <filepath>postgresql.conf</filepath> file.</p></li>
              <li>If there are multiple libraries listed, remove
                <codeph>plc_coordinator</codeph> from the list and re-set the configuration
                parameter. For example, if <codeph>shared_preload_libraries</codeph> is set
                to <codeph>'diskquota,plc_coordinator'</codeph>:
                <codeblock>$ gpconfig -c shared_preload_libraries -v 'diskquota'</codeblock></li>
            </ul></li>
          <li>Restart the Greenplum Database cluster:<codeblock>$ gpstop -ra</codeblock></li>
        </ol>
      </body>
    </topic>
    <topic xml:lang="en" id="topic_dty_fcj_kw" otherprops="pivotal">
      <title>Uninstall the PL/Container Language Extension</title>
      <body>
        <p>If no databases have <codeph>plcontainer</codeph> as a registered language, uninstall the
          Greenplum Database PL/Container language extension with the <codeph>gppkg</codeph>
          utility. </p>
        <ol id="ol_ety_fcj_kw">
          <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the <codeph>-r</codeph>
            option to uninstall the PL/Container language extension. This example uninstalls the
            PL/Container language extension on a Linux
              system:<codeblock>$ gppkg -r plcontainer-2.1.1</codeblock><p>You can run the
                <codeph>gppkg</codeph> utility with the options <codeph>-q --all</codeph> to list
              the installed extensions and their versions.</p></li>
          <li>Reload
            <codeph>greenplum_path.sh</codeph>.<codeblock>$ source $GPHOME/greenplum_path.sh</codeblock></li>
          <li>Restart the database.<codeblock>$ gpstop -ra</codeblock></li>
        </ol>
      </body>
    </topic>
  </topic>  

    
    <topic id="plc_notes">
      <title>Notes</title>
      <body>
      <p id="docker_notes"><b>Docker Notes</b></p>
        <ul id="ul_j4g_vgs_wbb">
          <li>If a PL/Container Docker container exceeds the maximum allowed memory, it is
          terminated and an out of memory warning is displayed. </li>
          <li>PL/Container does not limit the Docker base device size, the size of the Docker
            container. In some cases, the Docker daemon controls the base device size. For example,
            if the Docker storage driver is devicemapper, the Docker daemon
              <codeph>--storage-opt</codeph> option flag <codeph>dm.basesize</codeph> controls the
            base device size. The default base device size for devicemapper is 10GB. The Docker
            command <codeph>docker info</codeph> displays Docker system information including the
            storage driver. The base device size is displayed in Docker 1.12 and later. For
            information about Docker storage drivers, see the Docker information <xref
              href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-storage-driver"
              format="html" scope="external">Daemon storage-driver</xref>. <p>When setting the
              Docker base device size, the size must be set on all Greenplum Database
            hosts.</p></li>
        <li>
          <p><i>Known issue</i>: </p>
          <p>Occasionally, when PL/Container is running in a high concurrency environment, the
            Docker daemon hangs with log entries that indicate a memory shortage. This can happen
            even when the system seems to have adequate free memory.</p>
          <p>The issue seems to be triggered by the aggressive virtual memory requirement of the Go
            language (golang) runtime that is used by PL/Container, and the Greenplum Database Linux
            server kernel parameter setting for <i>overcommit_memory</i>. The parameter is set to 2
            which does not allow memory overcommit. </p>
          <p>A workaround that might help is to increase the amount of swap space and increase the
            Linux server kernel parameter overcommit_ratio. If the issue still occurs after the
            changes, there might be memory shortage. You should check free memory on the system and
            add more RAM if needed. You can also decrease the cluster load.</p>
        </li>
        </ul>
      </body>
    </topic>
  
    
    
  <topic xml:lang="en" id="topic_kds_plk_rbb">
    <title>Docker References</title>
      <body>
      <p>Docker home page <xref href="https://www.docker.com/" format="html" scope="external"
          >https://www.docker.com/</xref></p>
      <p>Docker command line interface <xref
          href="https://docs.docker.com/engine/reference/commandline/cli/" format="html"
          scope="external">https://docs.docker.com/engine/reference/commandline/cli/</xref></p>
      <p>Dockerfile reference <xref href="https://docs.docker.com/engine/reference/builder/"
          format="html" scope="external"
        >https://docs.docker.com/engine/reference/builder/</xref></p>
      <p>For CentOS, see <xref href="https://docs.docker.com/engine/installation/linux/centos/"
          format="html" scope="external"> Docker site installation instructions for CentOS</xref>. </p>
      <p>For a list of Docker commands, see the <xref
          href="https://docs.docker.com/engine/reference/run/" format="html" scope="external">Docker
          engine Run Reference</xref>.</p>
      <p>Installing Docker on Linux systems <xref
          href="https://docs.docker.com/engine/installation/linux/centos/" format="html"
          scope="external">https://docs.docker.com/engine/installation/linux/centos/</xref></p>
      <p>Control and configure Docker with systemd <xref
          href="https://docs.docker.com/engine/admin/systemd/" format="html" scope="external"
          >https://docs.docker.com/engine/admin/systemd/</xref></p>
      </body>
  </topic>

</topic>
