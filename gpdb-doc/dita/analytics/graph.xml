<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pz212122">Graph Analytics</title>
  <body>
    <p dir="ltr">Many modern business problems involve connections and relationships between
      entities, and are not solely based on discrete data. Graphs are powerful at representing
      complex interconnections, and graph data modeling is very effective and flexible when the
      number and depth of relationships increase exponentially. </p>
    <p dir="ltr">The use cases for graph analytics are diverse: social networks, transportation
      routes, autonomous vehicles, cyber security, criminal networks, fraud detection, health
      research, epidemiology, and so forth.</p>
    <p>This chapter contains the following information: </p>
    <ul id="ul_ond_45l_vlb">
      <li><xref href="#topic_graph" format="dita">What is a Graph?</xref></li>
      <li>
        <xref href="#graph_on_greenplum" format="dita"/></li>
      <li id="ij168827"><xref href="#topic_using_graph" format="dita"/>
      </li>
      <li><xref href="#topic_graph_modules" format="dita"/>
      </li>
      <li id="ij168816"><xref href="#topic_graph_references" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic_graph" xml:lang="en">
    <title id="pz214493">What is a Graph?</title>
    <body>
      <p>Graphs represent the interconnections between objects (vertices) and their relationships
        (edges). Example objects could be people, locations, cities, computers, or components on a
        circuit board. Example connections could be roads, circuits, cables, or interpersonal
        relationships. Edges can have directions and weights, for example the distance between
        towns. </p>
      <fig id="graph_figure">
        <image href="graphics/graph_example.png" id="graph_example_jpg" align="center" width="350"
          height="275"/>
      </fig>
      <p>Graphs can be small and easily traversed - as with a small group of friends - or extremely
        large and complex, similar to contacts in a modern-day social network. </p>
    </body>
  </topic>
  <topic id="graph_on_greenplum" xml:lang="en">
    <title>Graph Analytics on Greenplum</title>
    <body>
      <p>Efficient processing of very large graphs can be challenging. Greenplum offers a suitable
        environment for this work for these key reasons:</p>
      <ol id="ol_tyk_h44_rlb">
        <li>Using MADlib graph functions in Greenplum brings the graph computation close to where
          the data lives. Otherwise, large data sets need to be moved to a specialized graph
          database, requiring additional time and resources. </li>
        <li>Specialized graph databases frequently use purpose-built languages. With Greenplum, you
          can invoke graph functions using the familiar SQL interface. For example, for the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__pagerank.html" format="html"
            scope="external">PageRank</xref> graph
          algorithm:<codeblock>SELECT madlib.pagerank('vertex',     -- Vertex table
               'id',                 -- Vertex id column
               'edge',               -- Edge table
               'src=src, dest=dest', -- Comma delimited string of edge arguments
               'pagerank_out',       -- Output table of PageRank
                0.5);                -- Damping factor
SELECT * FROM pagerank_out ORDER BY pagerank DESC;</codeblock></li>
        <li> A lot of data science problems are solved using a combination of models, with graphs
          being just one. Regression, clustering, and other methods available in Greenplum, make for
          a powerful combination.</li>
        <li>Greenplum offers great benefits of scale, taking advantage of years of query execution
          and optimization research focused on large data sets. </li>
      </ol>
    </body>
  </topic>
  <topic id="topic_using_graph">
    <title>Using Graph</title>
    <body>
      <section>
        <p><b id="docs-internal-guid-115580ea-7fff-471c-274f-9ad5f8c87219">Installing Graph
            Modules</b></p>
        <p>To use the MADlib graph modules, install the version of MADlib corresponding to your
          Greenplum Database version. To download the software, access the VMware Tanzu Network. For
          Greenplum 6.x, see <xref
            href="http://greenplum.docs.pivotal.io/6latest/analytics/madlib.html#topic3"
            format="html" scope="external">Installing MADlib</xref>. </p>
        <p dir="ltr">Graph modules on MADlib support many algorithms. </p>
      </section>
      <section>
        <p><b id="docs-internal-guid-4e912884-7fff-c105-e4d6-c6f3bcf3cd2a">Creating a Graph in
            Greenplum</b></p>
        <p>To represent a graph in Greenplum, create tables that represent the vertices, edges, and
          their properties. </p>
        <fig id="fig_vertex_edge_table">
          <image href="graphics/vertex_edge_table.png" align="center" width="500" height="300"/>
        </fig>
        <p>Using SQL, create the relevant tables in the database you want to use. This example uses
            <codeph>testdb</codeph>:</p>
        <codeblock>gpadmin@mdw ~]$ psql
dev=# \c testdb</codeblock>
        <p>Create a table for vertices, called <codeph>vertex</codeph>, and a table for edges and
          their weights, called <codeph>edge</codeph>: </p>
        <codeblock>testdb=# DROP TABLE IF EXISTS vertex, edge; 
testdb=# CREATE TABLE vertex(id INTEGER); 
testdb=# CREATE TABLE edge(         
         src INTEGER,        
         dest INTEGER,           
         weight FLOAT8        
         );</codeblock>
        <p>Insert values related to your specific use case. For example : </p>
        <codeblock>testdb#=> INSERT INTO vertex VALUES
(0),
(1),
(2),
(3),
(4),
(5),
(6),
(7); 

testdb#=> INSERT INTO edge VALUES
(0, 1, 1.0),
(0, 2, 1.0),
(0, 4, 10.0),
(1, 2, 2.0),
(1, 3, 10.0),
(2, 3, 1.0),
(2, 5, 1.0),
(2, 6, 3.0),
(3, 0, 1.0),
(4, 0, -2.0),
(5, 6, 1.0),
(6, 7, 1.0);</codeblock>
        <p>Now select the <xref href="#topic_graph_modules" format="dita">Graph Module</xref> that
          suits your analysis. </p>
      </section>
    </body>
  </topic>
  <topic id="topic_graph_modules">
    <title>Graph Modules </title>
    <body>
      <p>This section lists the graph functions supported in MADlib. They include:  <xref
          href="#topic_graph_modules/section_m2x_rkr_xlb" format="dita"/>, <xref
          href="#topic_graph_modules/section_ykg_53s_xlb" format="dita"/>, <xref
          href="#topic_graph_modules/section_evh_t3s_xlb" format="dita"/>, <xref
          href="#topic_graph_modules/section_e3f_s3s_xlb" format="dita"/>, <xref
          href="#topic_graph_modules/section_rxc_r3s_xlb" format="dita"/>, <xref
          href="#topic_graph_modules/section_zmd_q3s_xlb" format="dita"/>, and <xref
          href="#topic_graph_modules/section_wcn_w3s_xlb" format="dita"/>. Explore each algorithm
        using the example <codeph>edge</codeph> and <codeph>vertex</codeph> tables already created. </p>
      <section id="section_m2x_rkr_xlb">
        <title>All Pairs Shortest Path (APSP)</title>
        <p>The all pairs shortest paths (APSP) algorithm finds the length (summed weights) of the
          shortest paths between all pairs of vertices, such that the sum of the weights of the path
          edges is minimized. </p>
        <p>The function is:</p>
        <codeblock>graph_apsp( vertex_table,
vertex_id,
edge_table,            
edge_args,            
out_table,            
grouping_cols          
)</codeblock>
        <p>For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__apsp.html" format="html"
            scope="external">All Pairs Shortest Path</xref> in the Apache MADlib documentation.</p>
      </section>
      <section id="section_ykg_53s_xlb">
        <title>Breadth-First Search</title>
        <p>Given a graph and a source vertex, the breadth-first search (BFS) algorithm finds all
          nodes reachable from the source vertex by searching / traversing the graph in a
          breadth-first manner. </p>
        <p>The function is:</p>
        <codeblock>graph_bfs( vertex_table,
          vertex_id,           
          edge_table,           
          edge_args,           
          source_vertex,           
          out_table,           
          max_distance,           
          directed,
          grouping_cols
          )</codeblock>
        <p dir="ltr">For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__bfs.html" format="html"
            scope="external">Breadth-First Search</xref> in the Apache MADlib documentation.</p>
      </section>
      <section id="section_evh_t3s_xlb">
        <title>Hyperlink-Induced Topic Search (HITS)</title>
        <p>The all pairs shortest paths (APSP) algorithm finds the length (summed weights) of the
          shortest paths between all pairs of vertices, such that the sum of the weights of the path
          edges is minimized. </p>
        <p>The function is:</p>
        <codeblock>graph_apsp( vertex_table,
           vertex_id,
           edge_table,            
           edge_args,            
           out_table,            
           grouping_cols          
           )</codeblock>
        <p dir="ltr">For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__hits.html" format="html"
            scope="external">Hyperlink-Induced Topic Search </xref> in the Apache MADlib
          documentation.</p>
      </section>
      <section id="section_e3f_s3s_xlb">
        <title>PageRank and Personalized PageRank</title>
        <p>Given a graph, the PageRank algorithm outputs a probability distribution representing a
          person’s likelihood to arrive at any particular vertex while randomly traversing the
          graph. </p>
        <p>MADlib graph also includes a personalized PageRank, where a notion of importance provides
          personalization to a query. For example, importance scores can be biased according to a
          specified set of graph vertices that are of interest or special in some way. </p>
        <p>The function is:</p>
        <codeblock>pagerank( vertex_table,
          vertex_id,          
          edge_table,          
          edge_args,          
          out_table,          
          damping_factor,          
          max_iter,          
          threshold,          
          grouping_cols,          
          personalization_vertices         
          )</codeblock>
        <p>For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__pagerank.html" format="html"
            scope="external">PageRank</xref> in the Apache MADlib documentation.</p>
      </section>
      <section id="section_rxc_r3s_xlb">
        <title>Single Source Shortest Path (SSSP)</title>
        <p>Given a graph and a source vertex, the single source shortest path (SSSP) algorithm finds
          a path from the source vertex to every other vertex in the graph, such that the sum of the
          weights of the path edges is minimized. </p>
        <p>The function is:</p>
        <codeblock>graph_sssp ( vertex_table, 
vertex_id, 
edge_table, 
edge_args, 
source_vertex, 
out_table, 
grouping_cols 
)</codeblock>
        <p>For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__sssp.html" format="html"
            scope="external">Single Source Shortest Path</xref> in the Apache MADlib
          documentation.</p>
      </section>
      <section id="section_zmd_q3s_xlb">
        <title>Weakly Connected Components</title>
        <p dir="ltr">Given a directed graph, a weakly connected component (WCC) is a subgraph of the
          original graph where all vertices are connected to each other by some path, ignoring the
          direction of edges.</p>
        <p dir="ltr">The function is:</p>
        <codeblock>weakly_connected_components( 
vertex_table, 
vertex_id, 
edge_table, 
edge_args, 
out_table, 
grouping_cols 
)</codeblock>
        <p dir="ltr">For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__wcc.html" format="html"
            scope="external">Weakly Connected Components</xref> in the Apache MADlib
          documentation.</p>
      </section>
      <section id="section_wcn_w3s_xlb">
        <title><i>Measures</i></title>
        <p>These algorithms relate to metrics computed on a graph and include: <xref
            href="#topic_graph_modules/section_k4q_x3s_xlb" format="dita"/>, <xref
            href="#topic_graph_modules/section_a2q_y3s_xlb" format="dita"/> , <xref
            href="#topic_graph_modules/section_pft_k4s_xlb" format="dita"/>, and <xref
            href="#topic_graph_modules/section_srk_j4s_xlb" format="dita"/>.</p>
      </section>
      <section id="section_k4q_x3s_xlb">
        <title>Average Path Length</title>
        <p dir="ltr">This function computes the shortest path average between pairs of vertices.
          Average path length is based on "reachable target vertices", so it averages the path
          lengths in each connected component and ignores infinite-length paths between unconnected
          vertices. If the user requires the average path length of a particular component, the
          weakly connected components function may be used to isolate the relevant vertices. </p>
        <p dir="ltr">The function is: </p>
        <codeblock>graph_avg_path_length( apsp_table,
                       output_table 
                       )</codeblock>
        <p dir="ltr">This function uses a previously run APSP (All Pairs Shortest Path) output. For
          details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__graph__avg__path__length.html"
            format="html" scope="external">Average Path Length</xref> in the Apache MADlib
          documentation.</p>
      </section>
      <section id="section_a2q_y3s_xlb">
        <title>Closeness Centrality</title>
        <p>The closeness centrality algorithm helps quantify how much information passes through a
          given vertex. The function returns various closeness centrality measures and the k-degree
          for a given subset of vertices. </p>
        <p dir="ltr">The function is:</p>
        <codeblock>graph_closeness( apsp_table,
output_table, 
vertex_filter_expr 
)</codeblock>
        <p dir="ltr">This function uses a previously run APSP (All Pairs Shortest Path) output. For
          details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__graph__closeness.html"
            format="html" scope="external">Closeness</xref> in the Apache MADlib documentation.</p>
      </section>
      <section id="section_pft_k4s_xlb">
        <title>Graph Diameter</title>
        <p dir="ltr">Graph diameter is defined as the longest of all shortest paths in a graph. The
          function is:</p>
        <codeblock>graph_diameter( apsp_table, 
output_table 
)</codeblock>
        <p dir="ltr">This function uses a previously run APSP (All Pairs Shortest Path) output. For
          details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__graph__diameter.html"
            format="html" scope="external">Graph Diameter</xref> in the Apache MADlib
          documentation.</p>
      </section>
      <section id="section_srk_j4s_xlb">
        <title>In-Out Degree</title>
        <p dir="ltr">This function computes the degree of each node. The node degree is the number
          of edges adjacent to that node. The node in-degree is the number of edges pointing in to
          the node and node out-degree is the number of edges pointing out of the node.</p>
        <p dir="ltr">The function is:</p>
        <codeblock>graph_vertex_degrees( vertex_table,
vertex_id,    
edge_table,
edge_args,    
out_table,
grouping_cols
)</codeblock>
        <p>For details on the parameters, with examples, see the <xref
            href="http://madlib.apache.org/docs/latest/group__grp__graph__vertex__degrees.html"
            format="html" scope="external">In-out Degree</xref> page in the Apache MADlib
          documentation.</p>
      </section>
    </body>
  </topic>
  <topic id="topic_graph_references" xml:lang="en">
    <title id="pz213965">References</title>
    <body>
      <p>MADlib on Greenplum is at <xref href="madlib.xml#topic1"/>.</p>
      <p>MADlib Apache web site and MADlib release notes are at <xref
          href="http://madlib.apache.org/" format="html" scope="external"
          >http://madlib.apache.org/</xref>.</p>
      <p>MADlib user documentation is at <xref href="http://madlib.apache.org/documentation.html"
          format="html" scope="external">http://madlib.apache.org/documentation.html</xref>.</p>
    </body>
  </topic>
</topic>
