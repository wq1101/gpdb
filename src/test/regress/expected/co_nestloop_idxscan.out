--
-- Nested loop join with index scan on CO table, test for MPP-17658
--
create schema co_nestloop_idxscan;
create table co_nestloop_idxscan.foo (id bigint, data text) with (appendonly=true, orientation=column)
distributed by (id);
create table co_nestloop_idxscan.bar (id bigint) distributed by (id);
-- Changing the text to be smaller doesn't repro the issue
insert into co_nestloop_idxscan.foo select i, repeat('xxxxxxxxxx', 100000) from generate_series(1,50) i;
insert into co_nestloop_idxscan.bar values (1);
create index foo_id_idx on co_nestloop_idxscan.foo(id);
-- test with hash join
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1528.77 rows=6 width=8)
   ->  Hash Join  (cost=1.02..1528.77 rows=2 width=8)
         Hash Cond: (f.id = b.id)
         ->  Seq Scan on foo f  (cost=0.00..1527.50 rows=17 width=8)
         ->  Hash  (cost=1.01..1.01 rows=1 width=8)
               ->  Seq Scan on bar b  (cost=0.00..1.01 rows=1 width=8)
 Optimizer: Postgres query optimizer
(7 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
(1 row)

-- test with nested loop join
set optimizer_enable_hashjoin = off;
set enable_hashjoin=off;
set enable_nestloop=on;
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=200.15..301.18 rows=6 width=8)
   ->  Nested Loop  (cost=200.15..301.18 rows=2 width=8)
         ->  Seq Scan on bar b  (cost=0.00..1.01 rows=1 width=8)
         ->  Bitmap Heap Scan on foo f  (cost=200.15..300.16 rows=1 width=8)
               Recheck Cond: (id = b.id)
               ->  Bitmap Index Scan on foo_id_idx  (cost=0.00..200.15 rows=1 width=0)
                     Index Cond: (id = b.id)
 Optimizer: Postgres query optimizer
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
(1 row)

-- test with nested loop join and index scan
set enable_seqscan = off;
-- start_ignore
-- Known_opt_diff: OPT-929
-- end_ignore
explain select f.id from co_nestloop_idxscan.bar b, co_nestloop_idxscan.foo f where f.id = b.id;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=10000000200.15..10000000301.18 rows=6 width=8)
   ->  Nested Loop  (cost=10000000200.15..10000000301.18 rows=2 width=8)
         ->  Seq Scan on bar b  (cost=10000000000.00..10000000001.01 rows=1 width=8)
         ->  Bitmap Heap Scan on foo f  (cost=200.15..300.16 rows=1 width=8)
               Recheck Cond: (id = b.id)
               ->  Bitmap Index Scan on foo_id_idx  (cost=0.00..200.15 rows=1 width=0)
                     Index Cond: (id = b.id)
 Optimizer: Postgres query optimizer
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
(1 row)

set optimizer_enable_hashjoin = on;
drop schema co_nestloop_idxscan cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to append only columnar table co_nestloop_idxscan.foo
drop cascades to table co_nestloop_idxscan.bar
